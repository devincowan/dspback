# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2022-06-22T23:14:45+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional, Union

from pydantic import AnyUrl, BaseModel, EmailStr, Field, confloat, constr


class Right(BaseModel):
    license: Optional[str] = 'Creative Commons Attribution CC BY'
    statement: Optional[str] = 'This resource is shared under the Creative Commons Attribution CC BY.'
    url: Optional[str] = 'http://creativecommons.org/licenses/by/4.0/'


class Right1(BaseModel):
    license: Optional[str] = 'Creative Commons Attribution-ShareAlike CC BY-SA'
    statement: Optional[str] = 'This resource is shared under the Creative Commons Attribution-ShareAlike CC BY-SA.'
    url: Optional[str] = 'http://creativecommons.org/licenses/by-sa/4.0/'


class Right2(BaseModel):
    license: Optional[str] = 'Creative Commons Attribution-NoDerivs CC BY-ND'
    statement: Optional[str] = 'This resource is shared under the Creative Commons Attribution-NoDerivs CC BY-ND.'
    url: Optional[str] = 'http://creativecommons.org/licenses/by-nd/4.0/'


class Right3(BaseModel):
    license: Optional[str] = 'Creative Commons Attribution-NoCommercial-ShareAlike CC BY-NC-SA'
    statement: Optional[
        str
    ] = 'This resource is shared under the Creative Commons Attribution-NoCommercial-ShareAlike CC BY-NC-SA.'
    url: Optional[str] = 'http://creativecommons.org/licenses/by-nc-sa/4.0/'


class Right4(BaseModel):
    license: Optional[str] = 'Creative Commons Attribution-NoCommercial CC BY-NC'
    statement: Optional[str] = 'This resource is shared under the Creative Commons Attribution-NoCommercial CC BY-NC.'
    url: Optional[str] = 'http://creativecommons.org/licenses/by-nc/4.0/'


class Right5(BaseModel):
    license: Optional[str] = 'Creative Commons Attribution-NoCommercial-NoDerivs CC BY-NC-ND'
    statement: Optional[
        str
    ] = 'This resource is shared under the Creative Commons Attribution-NoCommercial-NoDerivs CC BY-NC-ND.'
    url: Optional[str] = 'http://creativecommons.org/licenses/by-nc/4.0/'


class Right6(BaseModel):
    statement: Optional[str] = Field(
        None,
        description='A string containing the text of the license or rights statement',
        title='Statement',
    )
    url: Optional[AnyUrl] = Field(
        None,
        description='An object containing the URL pointing to a description of the license or rights statement',
        title='URL',
    )


class SpatialCoverageItem(BaseModel):
    name: Optional[str] = Field(
        None,
        description='A string containing a name for the place associated with the geographic coverage',
        title='Name',
    )
    east: confloat(lt=180.0, gt=-180.0) = Field(
        ...,
        description='The coordinate of the point location measured in the east direction (between -180 and 180)',
        title='East',
    )
    north: confloat(lt=90.0, gt=-90.0) = Field(
        ...,
        description=' The coordinate of the point location measured in the north direction (between -90 and 90)',
        title='North',
    )
    units: Optional[str] = Field(
        'Decimal degrees',
        description='The units applying to the unlabelled numeric values of north and east',
        title='Units',
    )
    projection: Optional[str] = Field(
        'WGS 84 EPSG:4326',
        description='The name of the projection used with any parameters required, such as ellipsoid parameters, datum, standard parallels and meridians, zone, etc.',
        title='Projection',
    )


class SpatialCoverageItem1(BaseModel):
    name: Optional[str] = Field(
        None,
        description='A string containing a name for the place associated with the geographic coverage',
        title='Name',
    )
    northlimit: confloat(lt=90.0, gt=-90.0) = Field(
        ...,
        description='A floating point value containing the constant coordinate for the northernmost face or edge of the bounding box (between -90 and 90)',
        title='North limit',
    )
    eastlimit: confloat(lt=180.0, gt=-180.0) = Field(
        ...,
        description='A floating point value containing the constant coordinate for the easternmost face or edge of the bounding box (between -180 and 180)',
        title='East limit',
    )
    southlimit: confloat(lt=90.0, gt=-90.0) = Field(
        ...,
        description='A floating point value containing the constant coordinate for the southernmost face or edge of the bounding box (between -90 and 90)',
        title='South limit',
    )
    westlimit: confloat(lt=180.0, gt=-180.0) = Field(
        ...,
        description='A floating point value containing the constant coordinate for the westernmost face or edge of the bounding box (between -180 and 180)',
        title='West limit',
    )
    units: Optional[str] = Field(
        'Decimal degrees',
        description='A string containing the units applying to the unlabelled numeric values of northlimit, eastlimit, southlimit, and westlimit',
        title='Units',
    )
    projection: Optional[str] = Field(
        'WGS 84 EPSG:4326',
        description='A string containing the name of the projection used with any parameters required, such as ellipsoid parameters, datum, standard parallels and meridians, zone, etc.',
        title='Projection',
    )


class Creator(BaseModel):
    name: Optional[constr(max_length=100)] = Field(
        None, description='A string containing the name of the creator', title='Name'
    )
    phone: Optional[constr(max_length=25)] = Field(
        None,
        description='A string containing a phone number for the creator',
        title='Phone',
    )
    address: Optional[constr(max_length=250)] = Field(
        None,
        description='A string containing an address for the creator',
        title='Address',
    )
    organization: Optional[constr(max_length=200)] = Field(
        None,
        description='A string containing the name of the organization with which the creator is affiliated',
        title='Organization',
    )
    email: Optional[EmailStr] = Field(
        None,
        description='A string containing an email address for the creator',
        title='Email',
    )
    homepage: Optional[AnyUrl] = Field(
        None,
        description='An object containing the URL for website associated with the creator',
        title='Homepage',
    )


class Contributor(BaseModel):
    name: Optional[constr(max_length=100)] = Field(
        None,
        description='A string containing the name of the contributor',
        title='Name',
    )
    phone: Optional[constr(max_length=25)] = Field(
        None,
        description='A string containing a phone number for the contributor',
        title='Phone',
    )
    address: Optional[constr(max_length=250)] = Field(
        None,
        description='A string containing an address for the contributor',
        title='Address',
    )
    organization: Optional[constr(max_length=200)] = Field(
        None,
        description='A string containing the name of the organization with which the contributor is affiliated',
        title='Organization',
    )
    email: Optional[EmailStr] = Field(
        None,
        description='A string containing an email address for the contributor',
        title='Email',
    )
    homepage: Optional[AnyUrl] = Field(
        None,
        description='An object containing the URL for website associated with the contributor',
        title='Homepage',
    )


class Type(Enum):
    The_content_of_this_resource_is_part_of = 'The content of this resource is part of'
    This_resource_includes = 'This resource includes'
    The_content_of_this_resource_was_created_by_a_related_App_or_software_program = (
        'The content of this resource was created by a related App or software program'
    )
    The_content_of_this_resource_was_created_by = 'The content of this resource was created by'
    This_resource_updates_and_replaces_a_previous_version = 'This resource updates and replaces a previous version'
    This_resource_has_been_replaced_by_a_newer_version = 'This resource has been replaced by a newer version'
    This_resource_is_described_by = 'This resource is described by'
    This_resource_conforms_to_established_standard_described_by = (
        'This resource conforms to established standard described by'
    )
    This_resource_has_a_related_resource_in_another_format = 'This resource has a related resource in another format'
    This_resource_is_a_different_format_of = 'This resource is a different format of'
    This_resource_is_required_by = 'This resource is required by'
    This_resource_requires = 'This resource requires'
    This_resource_is_referenced_by = 'This resource is referenced by'
    The_content_of_this_resource_references = 'The content of this resource references'
    This_resource_replaces = 'This resource replaces'
    The_content_of_this_resource_is_derived_from = 'The content of this resource is derived from'


class Relation(BaseModel):
    type: Type = Field(..., description='An enumeration.', title='RelationType')
    value: constr(max_length=500) = Field(
        ...,
        description='String expressing the Full text citation, URL link for, or description of the related resource',
        title='Value',
    )


class AdditionalMetadata(BaseModel):
    key: str = Field(..., title='Key')
    value: str = Field(..., title='Value')


class AwardInfo(BaseModel):
    funding_agency_name: str = Field(
        ...,
        description='A string containing the name of the funding agency or organization',
        title='Agency name',
    )
    title: Optional[str] = Field(
        None,
        description='A string containing the title of the project or award',
        title='Award title',
    )
    number: Optional[str] = Field(
        None,
        description='A string containing the award number or other identifier',
        title='Award number',
    )
    funding_agency_url: Optional[AnyUrl] = Field(
        None,
        description='An object containing a URL pointing to a website describing the funding award',
        title='Agency URL',
    )


class PeriodCoverage(BaseModel):
    name: Optional[str] = Field(
        None,
        description='A string containing a name for the time interval',
        title='Name',
    )
    start: datetime = Field(
        ...,
        description='A datetime object containing the instant corresponding to the commencement of the time interval',
        title='Start',
    )
    end: datetime = Field(
        ...,
        description='A datetime object containing the instant corresponding to the termination of the time interval',
        title='End',
    )


class Publisher(BaseModel):
    name: constr(max_length=200) = Field(
        ...,
        description='A string containing the name of the publisher',
        title='Publisher name',
    )
    url: AnyUrl = Field(
        ...,
        description='An object containing a URL that points to the publisher website',
        title='Publisher URL',
    )


class ResourceMetadata(BaseModel):
    title: constr(max_length=300) = Field(
        ...,
        description='A string containing the name given to a resource',
        title='Title',
    )
    abstract: str = Field(..., description='A string containing a summary of a resource', title='Abstract')
    subjects: List[str] = Field(
        ...,
        description='A list of keyword strings expressing the topic of a resource',
        min_items=2,
        title='Subject keywords',
    )
    creators: Optional[List[Creator]] = Field(
        [],
        description='A list of Creator objects indicating the entities responsible for creating a resource',
        title='Creators',
    )
    contributors: Optional[List[Contributor]] = Field(
        [],
        description='A list of Contributor objects indicating the entities that contributed to a resource',
        title='Contributors',
    )
    relations: Optional[List[Relation]] = Field(
        [],
        description='A list of Relation objects representing resources related to a described resource',
        title='Related resources',
    )
    additional_metadata: Optional[List[AdditionalMetadata]] = Field(
        [],
        description='A dictionary containing key-value pair metadata associated with a resource',
        title='Additional metadata',
    )
    rights: Union[Union[Right, Right1, Right2, Right3, Right4, Right5], Right6] = Field(
        ...,
        description='An object containing information about rights held in an over a resource',
        title='Rights',
    )
    awards: List[AwardInfo] = Field(
        ...,
        description='A list of objects containing information about the funding agencies and awards associated with a resource',
        title='Funding agency information',
    )
    spatial_coverage: Optional[Union[SpatialCoverageItem, SpatialCoverageItem1]] = Field(
        None,
        description='An object containing information about the spatial topic of a resource, the spatial applicability of a resource, or jurisdiction under with a resource is relevant',
        title='Spatial coverage',
    )
    period_coverage: Optional[PeriodCoverage] = Field(
        None,
        description='An object containing information about the temporal topic or applicability of a resource',
        title='Temporal coverage',
    )
    publisher: Optional[Publisher] = Field(
        None,
        description='An object containing information about the publisher of a resource',
        title='Publisher',
    )
    citation: Optional[str] = Field(
        None,
        description='A string containing the biblilographic citation for a resource',
        title='Citation',
    )
